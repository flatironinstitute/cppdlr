name: build

on:
  push:
    branches: [ main, '[0-9]+.[0-9]+.x' ]
  pull_request:
    branches: [ main, '[0-9]+.[0-9]+.x' ]
  workflow_call:
  workflow_dispatch:

env:
  CMAKE_C_COMPILER_LAUNCHER: ccache
  CMAKE_CXX_COMPILER_LAUNCHER: ccache
  CCACHE_COMPILERCHECK: content
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 500M
  CCACHE_SLOPPINESS: pch_defines,time_macros,include_file_mtime,include_file_ctime
  CCACHE_COMPRESS: "1"
  CCACHE_COMPRESSLEVEL: "1"

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu-22.04, cc: gcc-12, cxx: g++-12, doc: OFF}
          - {os: ubuntu-22.04, cc: clang-15, cxx: clang++-15, doc: ON}
          #- {os: macos-12, cc: gcc-12, cxx: g++-12, doc: OFF}
          #- {os: macos-12, cc: clang, cxx: clang++, doc: OFF}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache/restore@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ matrix.os }}-${{ matrix.cc }}-${{ github.run_id }}
        restore-keys:
          ccache-${{ matrix.os }}-${{ matrix.cc }}-

    - name: Install ubuntu dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: >
        sudo apt-get update &&
        sudo apt-get install
        ccache
        clang-15
        g++-12
        hdf5-tools
        libblas-dev
        libc++-15-dev
        libc++abi-15-dev
        libomp-15-dev
        libhdf5-dev
        liblapack-dev
        libopenmpi-dev
        openmpi-bin
        openmpi-common
        openmpi-doc
        python3
        python3-pip
        doxygen &&
        pip3 install myst-parser linkify-it-py &&
        pip3 install sphinx==5.3.0 sphinx-rtd-theme

    - name: Install homebrew dependencies
      if: matrix.os == 'macos-12'
      run: |
        brew install ccache gcc@12 llvm hdf5 open-mpi openblas
        mkdir $HOME/.venv
        python3 -m venv $HOME/.venv/my_python
        source $HOME/.venv/my_python/bin/activate
        pip install mako
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "PATH=$PATH" >> $GITHUB_ENV

    - name: add clang cxxflags
      if: ${{ contains(matrix.cxx, 'clang') }}
      run: |
        echo "PATH=/usr/local/opt/llvm/bin:$PATH" >> $GITHUB_ENV
        echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV

    - name: Build cppdlr
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        LIBRARY_PATH: /usr/local/opt/llvm/lib
      run: |
        mkdir build && cd build && cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/install -DBuild_Documentation=${{ matrix.doc }}
        make -j2 || make -j1 VERBOSE=1

    - name: Test cppdlr
      env:
        DYLD_FALLBACK_LIBRARY_PATH: /usr/local/opt/llvm/lib
        OPENBLAS_NUM_THREADS: "1"
      run: |
        cd build
        ctest -j2 --output-on-failure

    - name: ccache statistics
      if: always()
      run: ccache -sv

    - uses: actions/cache/save@v4
      if: always()
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ matrix.os }}-${{ matrix.cc }}-${{ github.run_id }}

    - name: Deploy documentation to website
      if: matrix.doc == 'ON' && github.event_name == 'push'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: build/doc/html
        branch: github.io
        target-folder: docs/${{ github.ref_name }}
